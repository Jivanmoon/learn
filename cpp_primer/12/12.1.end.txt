12.1
    b1和b2都包含4个元素

12.2
    code

12.3
    不需要，因为push_back和pop_back本来就是会修改成员变量的

12.4
    因为size_type类型是一个无符号整型数

12.5
    构造函数不是 explicit 的，意味着可以从 initializer_list 隐式转换为 StrBlob。在 StrBlob 对象中，只有一个数据成员 data，而 StrBlob 对象本身的含义，也是一个管理字符串的序列。因此，从 initializer_list 到 StrBlob 的转换，在逻辑上是可行的。而这个设计策略的缺点，可能在某些地方我们确实需要 initializer_list，而编译器仍会将之转换为 StrBlob。

12.6
    code

12.7
    code

12.8
    有错误，指针p指向的动态内存分配后没有释放

12.9
    r 和 q 指向 42，而之前 r 指向的 100 的内存空间并没有被释放，因此会发生内存泄漏。r2 和 q2 都是智能指针，当对象空间不被引用的时候会自动释放。

12.10
    正确，因为涉及到的指针都是同一个智能指针的拷贝，因此不会出错

12.11
    这样会创建一个新的智能指针，它的引用计数为 1，这个智能指针所指向的空间与 p 相同。在表达式结束后，这个临时智能指针会被销毁，引用计数为 0，所指向的内存空间也会被释放。而导致 p 所指向的空间被释放，使得 p 成为一个空悬指针。

12.12
    (a)合法，将sp拷贝给process的形参
    (b)不合法，因为普通指针不能隐式转换为智能指针
    (c)不合法，同b
    (d)合法。但是智能指针和内置指针一起使用可能会出现问题，在表达式结束后智能指针会被销毁，它所指向的对象也被释放。而此时内置指针 p 依旧指向该内存空间。之后对内置指针 p 的操作可能会引发错误。

12.13
    会销毁sp所指向而区域的内存，后续对sp的操作都是未知的

12.14
    void end_connection(connection *p) {
        disconnect(*p);
    }
    void f(destination &d) {
        connection c = connect(&d);
        shared_ptr<connection> p(&c, end_connection);
        //使用连接
    }

12.15
    void f(destination &d) {
        connection c = connect(&d);
        shared_ptr<connection> p(&c, [](connection *p) {
            disconnect(*p);
        });
        //使用连接
    }

12.16
    code
    错误有点长，可以自己编译看看

12.17
    (a)不合法，unique_ptr 对象需要用指针进行初始化
    (b)合法，但pi是个栈区地址
    (c)合法，但很危险，因为通过 unique_ptr 和 pi2 都可以操作内存，有可能出现一方释放了内存，但另一方仍在使用内存；
    (d)合法，但&ix是一个栈区地址
    (e)合法且安全
    (f)合法，但是如果p2销毁后，p5的操作就未定义

12.18
    release 成员的作用是放弃控制权并返回指针，因为在某一时刻只能有一个 unique_ptr 指向某个对象，unique_ptr 不能被赋值，所以要使用 release 成员将一个 unique_ptr 的指针的所有权传递给另一个 unique_ptr。而 shared_ptr 允许有多个 shared_ptr 指向同一个对象，因此不需要 release 成员。

12.19
    code

12.20
    code

12.21
    原来的方式更好，原来的方式代码更具有可读性

12.22
    code

12.23
    code

12.24
    code
    先读入字符串，然后创建一个和字符串大小相同（包含尾后结束符）的字符数组，然后保存。

12.25
    delete[] pa;

12.26
    code

12.27
    code

12.28
    code

12.29
    void runQueries(ifstream &infile) {
        TextQuery tq(infile);
        do {
            cout << "enter word to look for, or q to quit: ";
            string s;
            if(!(cin >> s) || s == "q") break;
            print(cout, tq.query(s));
        } while(true);
    }
    一般更新用while来写循环

12.30
    见12.27

12.31
    vector没有set的自动去重功能，因此需要自己实现去重，明显使用set更好

12.32
    code

12.33
    code
