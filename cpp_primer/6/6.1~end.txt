6.1
    实参是函数调用的实际值，是形参的初始值
6.2
    (a)函数的返回值类型为int，但是实际返回了string，由于string不能转换为int，因此出错
    (b)函数没有定义返回值类型
    (c)两个形参的变量名不能相同
    (d)函数体应该用花括号包住

6.3~6.5
    code

6.6
    形参定义在函数形参列表里面；局部变量定义在代码块里面；局部静态变量在程序的执行路径第一次经过对象定义语句时初始化，并且直到程序终止时才被销毁。
    code

6.7~6.12
    code

6.13
    void f(T) 的参数通过值传递，在函数中 T 是实参的副本，改变T不会影响到原来的实参。
    void f(&T) 的参数通过引用传递，在函数中的T是实参的引用，T的改变也就是实参的改变。

6.14
    例如交换两个整数的函数，形参应该是引用
    当实参的值是右值时，形参不能为引用类型：例如调用函数add(1, 2)，此时形参就不能是引用类型

6.15
    因为字符串可能很长，因此使用引用避免拷贝；而在函数中我们不希望改变 s 的内容，所以令 s 为常量。
    occurs 是要传到函数外部的变量，所以使用引用，occurs 的值会改变，所以是普通引用。
    因为我们只需要 c 的值，这个实参可能是右值(右值实参无法用于引用形参)，所以 c 不能用引用类型。
    如果 s 是普通引用，也可能会意外改变原来字符串的内容。
    occurs 如果是常量引用，那么意味着不能改变它的值，那也就失去意义了。

6.16
    因为改函数并没有修改s的值，因此应该将s定义为const string &s

6.17
    不相同，因为第一个函数并不需要修改string对象的值，因此应该将形参定义为常量引用
    第二个函数需要修改string对象的值，因此应该定义为引用类型

6.18
    (a)bool compare(const matrix &x, const matrix &y);
    (b)vector<int>::iterator change_val(int x, vector<int>::iterator it);

6.19
    (a)不合法，因为calc只有一个形参
    (b)合法
    (c)合法
    (d)合法

6.20
    当在函数中不修改参数的值时引用形参应该是常量引用，会误导调用者改函数可以修改实参的值，并且也会极大的限制该函数所能接受的实参类型

6.21
    code
    指针类型应该定义为const int *

6.22
    code

6.23
    code

6.24
    因为数组在传参过程中会转换为const int *类型，数组的长度不会被传递给函数，因此不能直接假定数组长度为10
    可以修改为
    void print(int (&arr)[10]) {
        for(auto elem : arr)
            cout << elem << endl;
    }

6.25~6.26
    code

6.27
    code

6.28
    elem是const string &类型

6.29
    应该使用常量引用类型。initializer_list 对象中的元素都是常量，我们无法修改initializer_list 对象中的元素的值。

6.30
    code
    6.30.cpp: In function ‘bool str_subrange(const string&, const string&)’:
    6.30.cpp:11:13: error: return-statement with no value, in function returning ‘bool’ [-fpermissive]
                return ;
                ^~~~~~
    <builtin>: recipe for target '6.30' failed
    make: *** [6.30] Error 1

6.31
    当引用绑定的是函数中的临时变量时，返回的引用无效；
    当我们希望返回的对象被修改时，返回常量的引用无效。

6.32
    合法，该函数用于将数组ia中的每个元素赋值为其下标值

6.33
    code

6.34
    如果val为正数，从结果上来说没有区别（多乘了个 1）; 如果val为负数，那么递归永远不会结束。

6.35
    如果传入的值是 val--，那么将会永远传入相同的值来调用该函数，递归将永远不会结束。

6.36
    string (&func(int x))[10];

6.37
    (a)using tmp = string[10];
        tmp &func(int x);
    (b)auto func(int x) -> string (&)[10]
    (c)string tmp[10];
        decltype(tmp) &func(int x);
    个人比较喜欢类型别名
    
6.38
    decltype(odd) &arrPtr(int i) {
        return (i % 2) ? odd : even;
    }

6.39
    (a)非法，因为函数参数忽略顶层const
    (b)非法，函数返回值不同不算重载
    (c)合法，重载一个参数是double *的重载函数

6.40
    (a)正确
    (b)错误，一旦某个形参给定了默认实参，则其后所有形参都必须有默认实参

6.41
    (a)非法；因为没有第一个参数
    (b)合法
    (c)合法，但是与程序员初衷不符

6.42
    code

6.43
    (a)放到头文件中，因为该函数为内联函数
    (b)放到头文件中，因为这是一个函数声明

6.44
    code

6.45
    应不应该是内联函数主要看这个函数是不是规模小、流程直接、频繁调用
    如果要修改为内联函数，则只需要在函数定义前加上inline关键字

6.46
    不能，因为constexpr函数要求返回值和形参都必须是字面值类型，而string并不是字面值类型

6.47
    code

6.48
    只要s不等于sought，就不断输入s；
    不合理，从程序的意图来看，应该使用assert(s == sought)

6.49
    候选函数：1、与被调用函数同名2、声明在调用点可见
    可行函数：1、形参数量与本次调用提供的实参数量相等2、每个实参类型与对应形参类型相同或可以转换

6.50
    (a) f(2.56, 42)
    可行函数：
        void f(int, int)
        void f(double, double = 3.14)
    最佳匹配
        无，因为调用二义性
    (b) f(42)
    可行函数：
        void f(int)
        void f(double, double = 3.14)
    最佳匹配
        void f(int)
    (c) f(42, 0)
    可行函数：
        void f(int, int)
        void f(double, double = 3.14)
    最佳匹配
        void f(int, int)
    (d) f(2.56, 3.14)
    可行函数：
        void f(int, int)
        void f(double, double = 3.14)
    最佳匹配
        void f(double, double = 3.14)

6.51
    code

6.52
    (a)等级3，通过类型提升实现匹配
    (b)等级4，通过算数类型转换实现匹配

6.53
    (a)当实参中只要有一个是常量时，调用第二个函数
    (b)当实参中只要有一个是常量地址时，调用第二个函数
    (c)非法，因为传参过程中忽略顶层const

6.54
    int func(int, int);
    vector<int (*)(int, int)> vi;

6.55~6.56
    code

