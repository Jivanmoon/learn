9.1
    (a)list，因为涉及频繁的插入操作
    (b)deque：因为数据量未知且在头尾进行插入删除操作票
    (c)vector：因为数据量未知，但是需要排序

9.2
    list<deque<int>> li;

9.3
    (1)两个迭代器指向同一个容器中的元素，或容器最后一个元素之后的位置
    (2)可以通过反复递增begin到达end

9.4~9.5
    code

9.6
    修改成如下：
    while (iter1 != iter2)

9.7
    vector<int>::size_type

9.8
    读取元素：list<string>::const_iterator
    写元素：list<string>::iterator

9.9
    begin函数根据容器类型返回对应的迭代器，如果容器是const的，则返回const的迭代器，否则返回普通迭代器
    cbegin函数一定返回的是const的迭代器

9.10
    这里的代码在 VS2013 下是有错误的。
    错误 1 error C3538: 在声明符列表中，“auto”必须始终推导为同一类型 因此代码要改为
    auto it1 = v1.begin();
    auto it2 = v2.begin(), it3 = v1.cbegin(), it4 = v2.cbegin();
    it1 是 vector<int>::iterator
    it2，it3 和 it4 是 vector<int>::const_iterator

9.11
    code

9.12
    接受一个容器创建拷贝的构造函数要求两个容器类型相同装的元素类型必须相同，而接受两个迭代器创建拷贝的构造函数容器可以不同，装的元素类型也只需要能够转换就行

9.13
    list<int> li;
    vector<int> vi;
    vector<double> vd(li.begin(), li.end());
    vector<double> vdd(vi.begin(), vi.end());
    code
    
9.14
    code

9.15~9.16
    code

9.17
    c1和c2必须是相同容器而且元素类型相同，而且其元素必须实现了<运算符

9.18~9.20
    code

9.21
    每向vector中插入一个元素，则插入位置后面的所有元素都要后移一位

9.22
    在插入元素后，vector的迭代器会失效，该程序永远也不会结束，可以修改为：
    while(iter != mid) {
        if(*iter == some_val) {
            iter = iv.insert(iter, 2 * some_val);
            ++iter;
        }
        ++iter;
    }

9.23
    val1、val2、val3、val4都是容器中的第一个元素

9.24
    code

9.25
    相等的话不会删除任何元素，并返回elem2所指位置的迭代器
    如果elem2是尾后迭代器，则删除从elem1到最后的所有元素
    如果elem1和elem2都是尾后迭代器，则不会有什么影响

9.26
    code

9.27~9.28
    code

9.29
    会将75个0添加到vec中
    会删除vec中前十个元素后的所有元素

9.30
    如果容器保存的是类类型元素，则元素必须提供一个默认构造函数

9.31
    因为对迭代器使用了+=运算符，而list和forward_list的迭代器不支持该运算符
    对于list需要修改为
    code

9.32
    不合法。虽然上面语句可以正常运行，但是由于在C++中并没有指定函数形参的入栈顺序，因此可能是先输入iter这个形参，或是先输入*iter++这个形参。对于这两种情况而言，得到的结果将会不同。

9.33
    程序因为begin迭代器失效而出现段错误
    code

9.34
    vectord的insert(iter, tmp)操作是在iter所指位置之前插入tmp，并且返回指向tmp的迭代器
    因此该程序死循环


