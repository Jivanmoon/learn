            并发（信号、线程）

异步事件处理：查询法、通知法
    如果异步事件频率高，则适合查询法
    如果异步事件频率低，则适合通知法
一、信号
1、信号的概念
    信号是软件层面的中断。
    信号的响应依赖于中断。
    
2、signal()
    void (*signal(int signum, void (*func)(int)))(int);
    信号会打断阻塞的系统调用！！！！！！！！！！

3、信号的不可靠
    
4、可重入函数
    第一次调用没有结束，就进行了第二次调用，但是程序不会出错。这就是可重入函数
    所有的系统调用都是可重入的，一部分库函数也是可重入的，比如说：memcpy，后缀为_r版本的库函数
    
5、信号的响应过程
    信号从收到到响应有一个不可避免的延迟，因为程序只有在中断之后从内核态切换到用户态时才回去检查当前是否有中断，此时才能响应中断
    思考：如何忽略掉一个信号？（其实就是把对应信号的屏蔽字置为0）
            标准信号为什么要丢失？（因为进程是使用位图来记录待处理的信号，而位图对一种信号只能记录一个）
    标准信号的响应没有严格的顺序

6、信号常用函数
    kill()：给一个进程发信号
    raise()：给当前进程发信号
    alarm()：计时函数，倒计时为0时给当前进程发送信号，当程序中出现多个alarm时，只有最后一个alarm生效
    pause()：暂停程序，等待一个信号到来
    abort()
    system()
    sleep()
7、信号集
8、信号屏蔽字/pending集的处理
9、扩展
    sigsuspend()
    sigaction()
    setitimer()
10、实时信号
二、线程